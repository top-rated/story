name: Apply /apply-main (base64-safe; PR for workflows)

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-main:
    if: ${{ startsWith(github.event.comment.body, '/apply-main') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine default branch
        run: echo "DEFAULT=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV

      - name: Read comment (base64) + title
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body || '';
            const b64 = Buffer.from(body, 'utf8').toString('base64');
            core.setOutput('comment_b64', b64);
            const firstLine = body.split(/
?
/)[0] || '';
            const title = firstLine.replace(/^\/apply-main\s*/, '') || 'apply patch from /apply-main';
            core.setOutput('title', title);

      - name: Save comment and parse patch
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          echo "TITLE=${{ steps.prep.outputs.title }}" >> $GITHUB_ENV
          echo "${{ steps.prep.outputs.comment_b64 }}" | base64 -d > comment.txt

          # Extract fenced ```diff block
          awk 'BEGIN{code=0}                /^```diff[[:space:]]*$/ {code=1; next}                /^```[[:space:]]*$/ { if(code){ code=0; exit } }                code { print }' comment.txt > patch.diff

          if [ ! -s patch.diff ]; then
            echo '::error::No fenced ```diff block found in the comment.'
            echo 'Make sure your comment looks like:'
            echo '/apply-main <title>'
            echo '```diff'
            echo '<unified git diff>'
            echo '```'
            exit 1
          fi

          echo '---- PATCH PREVIEW ----'
          head -n 40 patch.diff || true
          echo '-----------------------'

      - name: Detect if patch touches workflow files
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          sed -n -E 's/^diff --git a\/[^ ]+ b\/(.+)$//p' patch.diff > files.txt || true
          if grep -qE '^\.github/workflows/' files.txt; then
            echo "TOUCHES_WORKFLOWS=true" >> $GITHUB_ENV
          else
            echo "TOUCHES_WORKFLOWS=false" >> $GITHUB_ENV
          fi
          echo 'Files changed:'
          cat files.txt || true

      - name: Apply patch directly to default branch
        if: env.TOUCHES_WORKFLOWS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "$DEFAULT"
          git checkout -B "$DEFAULT" "origin/$DEFAULT" || git checkout "$DEFAULT"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git apply --check --whitespace=fix patch.diff
          git apply --whitespace=fix patch.diff

          git add -A
          git commit -m "${TITLE}"
          git push origin "HEAD:$DEFAULT"

      - name: Create branch and PR (workflow files present)
        if: env.TOUCHES_WORKFLOWS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="apply/${{ github.run_id }}-${{ github.run_attempt }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          git fetch origin "$DEFAULT"
          git checkout -B "$DEFAULT" "origin/$DEFAULT" || git checkout "$DEFAULT"
          git checkout -b "$BRANCH"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git apply --check --whitespace=fix patch.diff
          git apply --whitespace=fix patch.diff

          git add -A
          git commit -m "${TITLE}"
          git push origin "$BRANCH"

      - name: Open Pull Request
        if: env.TOUCHES_WORKFLOWS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const title = process.env.TITLE || 'apply patch from /apply-main';
            const head  = process.env.BRANCH;
            const base  = process.env.DEFAULT;
            const body  = `Automated from ${context.payload.comment.html_url}`;
            const pr = await github.rest.pulls.create({owner, repo, title, head, base, body, draft: false});
            core.notice(`PR opened: ${pr.data.html_url}`);
