name: Apply /apply-main (safe capture; PR for workflows)

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-main:
    if: ${{ startsWith(github.event.comment.body, '/apply-main') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine default branch
        run: echo "DEFAULT=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV

      - name: Parse comment â†’ patch + title (heredoc, no eval)
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          # Write raw comment body to file WITHOUT shell interpolation (single-quoted heredoc)
          cat > comment.txt <<'COMMENT_EOF'
${{ github.event.comment.body }}
COMMENT_EOF
          # First line for title
          TITLE_RAW="$(head -n1 comment.txt || true)"
          TITLE="${TITLE_RAW#'/apply-main '}"
          if [ -z "${TITLE:-}" ] || [ "${TITLE:-}" = "/apply-main" ]; then
            TITLE="apply patch from /apply-main"
          fi
          echo "TITLE=$TITLE" >> $GITHUB_ENV

          # Extract fenced ```diff ... ``` into patch.diff
          awk 'BEGIN{code=0}                /^```diff[[:space:]]*$/ {code=1; next}                /^```[[:space:]]*$/ { if(code){ code=0; exit } }                code { print }' comment.txt > patch.diff

          if [ ! -s patch.diff ]; then
            echo "::error::No fenced ```diff block found in the comment."
            echo "Ensure the comment has exactly one block like:"
            echo "/apply-main <title>"
            echo "\`\`\`diff"
            echo "<unified git diff>"
            echo "\`\`\`"
            exit 1
          fi

          echo "---- PATCH PREVIEW ----"
          head -n 40 patch.diff || true
          echo "-----------------------"

      - name: Detect if patch touches workflow files
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Collect target paths from diff headers (b/<path> after diff --git a/... b/...)
          sed -n -E 's/^diff --git a\/[^ ]+ b\/(.+)$/\1/p' patch.diff > files.txt || true
          if grep -qE '^\.github/workflows/' files.txt; then
            echo "TOUCHES_WORKFLOWS=true" >> $GITHUB_ENV
          else
            echo "TOUCHES_WORKFLOWS=false" >> $GITHUB_ENV
          fi
          echo "Files changed:"
          cat files.txt || true

      - name: Apply patch directly to default branch
        if: env.TOUCHES_WORKFLOWS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "$DEFAULT"
          git checkout -B "$DEFAULT" "origin/$DEFAULT" || git checkout "$DEFAULT"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git apply --check --whitespace=fix patch.diff
          git apply --whitespace=fix patch.diff

          git add -A
          git commit -m "${TITLE}"
          git push origin "HEAD:$DEFAULT"

      - name: Create branch and PR (workflow files present)
        if: env.TOUCHES_WORKFLOWS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="apply/${{ github.run_id }}-${{ github.run_attempt }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          git fetch origin "$DEFAULT"
          git checkout -B "$DEFAULT" "origin/$DEFAULT" || git checkout "$DEFAULT"
          git checkout -b "$BRANCH"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git apply --check --whitespace=fix patch.diff
          git apply --whitespace=fix patch.diff

          git add -A
          git commit -m "${TITLE}"
          git push origin "$BRANCH"

      - name: Open Pull Request
        if: env.TOUCHES_WORKFLOWS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const title = process.env.TITLE || 'apply patch from /apply-main';
            const head  = process.env.BRANCH;
            const base  = process.env.DEFAULT;
            const body  = `Automated from ${context.payload.comment.html_url}`;
            const pr = await github.rest.pulls.create({owner, repo, title, head, base, body, draft: false});
            core.notice(`PR opened: ${pr.data.html_url}`);
