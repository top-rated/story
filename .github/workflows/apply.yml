name: Apply /apply patch
on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Detect /apply and extract diff
        id: detect
        env:
          BODY: ${{ github.event.comment.body }}
        run: |
          set -e
          body="$(printf "%s" "$BODY" | sed '1s/^[[:space:]\ufeff]*//')"
          first="$(printf "%s" "$body" | head -n1)"
          case "$first" in
            "/apply"|"/apply "*) title="${first#/apply }" ;;
            *) echo "ok=false" >> $GITHUB_OUTPUT; exit 0 ;;
          esac
          echo "ok=true" >> $GITHUB_OUTPUT
          printf 'title=%s\n' "$title" >> $GITHUB_OUTPUT

          # вытащить первый блок ```diff ... ```
          awk '
            tolower($0) ~ /^```[[:space:]]*diff[[:space:]]*$/ && !inside {inside=1; next}
            /^```/ && inside {inside=0; exit}
            inside {print}
          ' <<< "$body" > "$RUNNER_TEMP/patch.diff"

          [ -s "$RUNNER_TEMP/patch.diff" ] || { echo "ok=false" >> $GITHUB_OUTPUT; exit 0; }
          printf 'patch=%s\n' "$RUNNER_TEMP/patch.diff" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        if: steps.detect.outputs.ok == 'true'
        with:
          fetch-depth: 0

      - name: Apply and commit
        if: steps.detect.outputs.ok == 'true'
        id: apply
        env:
          PATCH: ${{ steps.detect.outputs.patch }}
          TITLE: ${{ steps.detect.outputs.title }}
        run: |
          set -euxo pipefail
          BR="chatgpt/apply-${{ github.event.comment.id }}"
          git switch -c "$BR"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git apply --check --whitespace=fix "$PATCH"
          git apply --whitespace=fix "$PATCH"
          git add -A
          git commit -m "${TITLE:-apply patch}"
          git push -u origin "$BR"
          echo "branch=$BR" >> $GITHUB_OUTPUT

      - name: Open draft PR
        if: steps.detect.outputs.ok == 'true'
        uses: actions/github-script@v7
        env:
          TITLE: ${{ steps.detect.outputs.title }}
          HEAD: ${{ steps.apply.outputs.branch }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = process.env.TITLE || 'apply patch';
            const head  = process.env.HEAD;
            if (!head) throw new Error('HEAD branch is empty');
            const base  = context.payload.repository.default_branch;
            const body  = `Automated from ${context.payload.comment.html_url}`;
            const res = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title, head, base, body, draft: true
            });
            core.info(`PR: ${res.data.html_url}`);
